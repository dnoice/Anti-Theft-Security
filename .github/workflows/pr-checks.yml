# File: .github/workflows/pr-checks.yml

name: 🔍 Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: pr-checks-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # ================================================
  # QUICK VALIDATION CHECKS
  # ================================================
  validation:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🎯 Grant execute permission
      run: chmod +x gradlew
      
    - name: 🔍 Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v2
      
    - name: 📦 Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-pr-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-pr-
          ${{ runner.os }}-gradle-
          
    - name: ✅ Check code compiles
      run: ./gradlew compileDebugSources --parallel
      
    - name: 🧪 Run unit tests
      run: ./gradlew testDebugUnitTest --parallel
      
    - name: 📊 Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: 🧪 Unit Test Results
        path: app/build/test-results/testDebugUnitTest/TEST-*.xml
        reporter: java-junit

  # ================================================
  # CODE QUALITY ANALYSIS
  # ================================================
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🎯 Grant execute permission
      run: chmod +x gradlew
      
    - name: 📦 Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-quality-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-quality-
          ${{ runner.os }}-gradle-
          
    - name: 🔍 Run lint checks
      run: ./gradlew lintDebug --parallel
      
    - name: 📊 Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results-pr-${{ github.event.pull_request.number }}
        path: app/build/reports/lint-results*.html
        retention-days: 14
        
    - name: 📝 Comment lint results
      uses: yutailang0119/action-android-lint@v3
      if: always()
      with:
        report-path: app/build/reports/lint-results-debug.xml
      continue-on-error: true

  # ================================================
  # SECURITY SCAN
  # ================================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🛡️ Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: java
        
    - name: 🔧 Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🎯 Grant execute permission
      run: chmod +x gradlew
      
    - name: 🏗️ Build for security analysis
      run: ./gradlew compileDebugSources
      
    - name: 🛡️ Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # ================================================
  # BUILD TEST APK
  # ================================================
  build-test:
    name: 🏗️ Build Test APK
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout PR
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🎯 Grant execute permission
      run: chmod +x gradlew
      
    - name: 📦 Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-build-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-build-
          ${{ runner.os }}-gradle-
          
    - name: 🏗️ Build debug APK
      run: ./gradlew assembleDebug --parallel
      
    - name: 🔍 Verify APK exists
      run: |
        APK_PATH=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
        if [ -f "$APK_PATH" ]; then
          echo "✅ APK built successfully: $APK_PATH"
          APK_SIZE=$(stat -c%s "$APK_PATH")
          APK_SIZE_MB=$(echo "scale=2; $APK_SIZE / 1024 / 1024" | bc)
          echo "📦 APK Size: ${APK_SIZE_MB} MB"
          
          # Add to PR comment
          echo "### 📱 PR Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ APK built successfully" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Size: ${APK_SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ File: $(basename $APK_PATH)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ APK build failed"
          exit 1
        fi
        
    - name: 📤 Upload PR APK
      uses: actions/upload-artifact@v4
      with:
        name: pr-${{ github.event.pull_request.number }}-debug-apk
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 7

  # ================================================
  # PR SUMMARY COMMENT
  # ================================================
  pr-summary:
    name: 📝 PR Summary
    runs-on: ubuntu-latest
    needs: [validation, code-quality, security-scan, build-test]
    if: always() && github.event.pull_request.draft == false
    
    steps:
    - name: 📝 Create PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const jobs = {
            validation: '${{ needs.validation.result }}',
            'code-quality': '${{ needs.code-quality.result }}',
            'security-scan': '${{ needs.security-scan.result }}',
            'build-test': '${{ needs.build-test.result }}'
          };
          
          const getEmoji = (result) => {
            switch(result) {
              case 'success': return '✅';
              case 'failure': return '❌';
              case 'cancelled': return '⏹️';
              case 'skipped': return '⏭️';
              default: return '🔄';
            }
          };
          
          const getStatus = (result) => {
            switch(result) {
              case 'success': return 'Passed';
              case 'failure': return 'Failed';
              case 'cancelled': return 'Cancelled';
              case 'skipped': return 'Skipped';
              default: return 'Running';
            }
          };
          
          let comment = `## 🤖 PR Checks Summary\n\n`;
          comment += `| Check | Status | Result |\n`;
          comment += `|-------|--------|--------|\n`;
          
          for (const [job, result] of Object.entries(jobs)) {
            const emoji = getEmoji(result);
            const status = getStatus(result);
            comment += `| ${job.replace('-', ' ')} | ${emoji} | ${status} |\n`;
          }
          
          comment += `\n### 📱 Test APK\n`;
          if (jobs['build-test'] === 'success') {
            comment += `✅ **Debug APK built successfully!**\n`;
            comment += `📥 Download from the "Artifacts" section in the [Actions tab](${context.payload.pull_request.html_url.replace('/pull/', '/actions')}).\n\n`;
            comment += `🔗 Artifact name: \`pr-${context.payload.pull_request.number}-debug-apk\`\n`;
          } else {
            comment += `❌ APK build failed. Check the logs for details.\n`;
          }
          
          comment += `\n---\n`;
          comment += `🔄 **Workflow run**: [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
          comment += `📝 **Commit**: ${context.sha.substring(0, 7)}\n`;
          
          // Post or update comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🤖 PR Checks Summary')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
          }
