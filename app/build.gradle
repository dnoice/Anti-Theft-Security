// File: app/build.gradle (Module: app)

android {
    namespace 'com.antitheft.security'
    compileSdk 34

    defaultConfig {
        applicationId "com.antitheft.security"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            
            // Security: Obfuscate the app in release builds
            shrinkResources true
        }
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Enable view binding for easier view access
    buildFeatures {
        viewBinding true
    }

    // Packaging options
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0']
        }
    }
}

dependencies {
    // Core Android Libraries
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core:1.12.0'
    implementation 'androidx.activity:activity:1.8.2'
    implementation 'androidx.fragment:fragment:1.6.2'
    
    // UI Components
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'com.google.android.material:material:1.11.0'
    
    // Camera and Image Processing
    implementation 'androidx.camera:camera-core:1.3.1'
    implementation 'androidx.camera:camera-camera2:1.3.1'
    implementation 'androidx.camera:camera-lifecycle:1.3.1'
    implementation 'androidx.camera:camera-view:1.3.1'
    
    // File Provider and Storage
    implementation 'androidx.core:core:1.12.0'
    
    // Lifecycle Components
    implementation 'androidx.lifecycle:lifecycle-runtime:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-service:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-process:2.7.0'
    
    // Work Manager (for background tasks)
    implementation 'androidx.work:work-runtime:2.9.0'
    
    // Preferences
    implementation 'androidx.preference:preference:1.2.1'
    
    // Security
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    
    // Permissions
    implementation 'androidx.core:core-ktx:1.12.0'
    
    // Image Loading and Processing (Optional - for better thumbnails)
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'
    
    // Testing Dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    
    // Optional: For enhanced debugging
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'
}

// ==================== gradle.properties ==================== 
# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
android.useAndroidX=true

# Kotlin code style for this project: "official" or "obsolete"
kotlin.code.style=official

# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

# Enable R8 full mode
android.enableR8.fullMode=true

# ==================== proguard-rules.pro ==================== 
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.

# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# Keep all classes related to security
-keep class com.antitheft.security.** { *; }

# Keep sensor-related classes
-keep class android.hardware.** { *; }

# Keep service classes
-keep class * extends android.app.Service

# Keep notification classes
-keep class androidx.core.app.NotificationCompat** { *; }

# Keep media player classes
-keep class android.media.** { *; }

# Keep vibrator classes
-keep class android.os.Vibrator** { *; }

# Keep preferences classes
-keep class android.content.SharedPreferences** { *; }

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

# ==================== File Structure Summary ==================== 
/*
Project Structure:

app/
├── src/
│   ├── main/
│   │   ├── java/com/antitheft/security/
│   │   │   ├── MainActivity.java
│   │   │   ├── AlarmActivity.java
│   │   │   ├── SensorService.java
│   │   │   ├── AlarmManager.java
│   │   │   └── SecurityManager.java
│   │   ├── res/
│   │   │   ├── layout/
│   │   │   │   ├── activity_main.xml
│   │   │   │   └── activity_alarm.xml
│   │   │   ├── drawable/
│   │   │   │   ├── ic_shield.xml
│   │   │   │   ├── ic_warning.xml
│   │   │   │   ├── ic_alarm.xml
│   │   │   │   ├── button_*.xml (various buttons)
│   │   │   │   ├── edittext_background.xml
│   │   │   │   ├── spinner_background.xml
│   │   │   │   └── pin_background.xml
│   │   │   ├── values/
│   │   │   │   ├── strings.xml
│   │   │   │   ├── colors.xml
│   │   │   │   └── styles.xml
│   │   │   ├── raw/
│   │   │   │   ├── siren_sound.mp3
│   │   │   │   ├── beep_sound.mp3
│   │   │   │   ├── horn_sound.mp3
│   │   │   │   └── bell_sound.mp3
│   │   │   └── mipmap/
│   │   │       └── ic_launcher.png (app icon)
│   │   └── AndroidManifest.xml
│   └── build.gradle (this file)
└── gradle.properties
*/

# ==================== Additional Setup Notes ==================== 

/*
REQUIRED SOUND FILES:
Place these MP3 files in app/src/main/res/raw/:
- siren_sound.mp3 (main alarm sound)
- beep_sound.mp3 (alternative sound)
- horn_sound.mp3 (alternative sound)
- bell_sound.mp3 (alternative sound)

You can download free alarm sounds from:
- freesound.org
- zapsplat.com
- mixkit.co

REQUIRED ICONS:
The vector drawable files are provided above, but you'll also need:
- App launcher icon (ic_launcher.png) in mipmap folders
- Optional: Create adaptive icons for modern Android versions

TESTING REQUIREMENTS:
- Physical Android device (accelerometer doesn't work in emulator)
- Android 5.0+ (API level 21+)
- Device with motion sensors (accelerometer, gyroscope)

PERMISSIONS NEEDED:
All permissions are already defined in AndroidManifest.xml:
- VIBRATE: For haptic feedback
- WAKE_LOCK: Keep device awake during monitoring
- FOREGROUND_SERVICE: Background motion detection
- POST_NOTIFICATIONS: Show security status notifications
- SYSTEM_ALERT_WINDOW: Display alarm over lock screen
- DISABLE_KEYGUARD: Bypass lock screen for alarm
- TURN_SCREEN_ON: Wake screen when alarm triggers

SECURITY FEATURES:
✅ PIN protection with lockout after failed attempts
✅ Background service continues monitoring
✅ Full-screen alarm that can't be easily dismissed
✅ Volume controls disabled during alarm
✅ Prevents back button from closing alarm
✅ Automatic service restart if killed
✅ Secure preference storage
✅ Motion sensitivity calibration
*/
